#!/usr/bin/perl

##
## Title:         HS-DeckTrack
## Description:   A Terminal-based Deck Tracker for Hearthstone
## Author:        Dave Russell (bru7us)
## 
## Version:       0.2
## Modified:      19 Jun 2014
##
## License:       MIT (https://github.com/bru7us/HS-DeckTrack/blob/master/LICENSE)
##

use strict;
use warnings;
use Data::Dumper;
use Getopt::Std;
use Env qw(HOME);

my %opts;
my $logfile;
my $deckfile;
my %deck_hash;
my %game_hash;
my %op_played_hash;
my %op_discard_hash;
my %hero_discard_hash;
my %hero_burned_hash;
my %hero_mull_hash;
my %hero_drawn_hash;
my %hero_played_hash;
my $DEBUG;
my $card;

$| = 1; #Disable print buffering

sub usage {
    select(STDERR);
    printf("\nUsage: [options]");
    printf("\n");
    printf("    -h show this help\n");
    printf("    -d <path> Path to a file containing your deck. Compulsory!\n");
    printf("    -l <path> Path to the Hearthstone log file. Default: ~/Library/Logs/Unity/Player.log\n");
    printf("    -o Print cards revealed played by Opponent");
    printf("    -m Highlight Milled/Discarded cards");
    printf("    -X print debug messages to STDOUT\n");
    printf("");
    exit(1);
}

getopts ('d:hl:moX', \%opts);
&usage if $opts{'h'};
$DEBUG = 1 if $opts{'X'};

$logfile = $opts{l} // $ENV{HOME}.'/Library/Logs/Unity/Player.log';
$deckfile = $opts{d} // '';

&usage if ($deckfile eq '');

print "logfile:" . $logfile . "\n" if ($DEBUG);
print "deckfile:" . $deckfile. "\n" if ($DEBUG);

open DECKFILE, $deckfile
  or die "Could not open Deck:\"$deckfile\" for reading: $!\n";

while (my $line = <DECKFILE>) {
  chomp($line);
  $deck_hash{$line} += 1;
}

close DECKFILE;

%game_hash = %deck_hash;


while (1) {

  print "\033[2J";   #clear the screen
  print "\033[0;0H"; #jump to 0,0

  open LOGFILE, $logfile
    or die "Could not open Log:\"$logfile\" for reading: $!\n";
  
  while (<LOGFILE>) {
    if (/^\[Zone.*\[name=(.*) id=.*zone=(HAND|PLAY).* FRIENDLY DECK /) {
      $hero_drawn_hash{$1} += 1;
    }
    if (/^\[Zone.*\[name=(.*) id=.*zone=DECK.* FRIENDLY DECK$/) {
      $hero_mull_hash{$1} += 1;
    }
    if (/^\[Zone.*\[name=(.*) id=.*zone=(HAND|PLAY).* FRIENDLY HAND /) {
      $hero_played_hash{$1} += 1;
    }
    if (/^\[Zone.*\[name=(.*) id=.*zone=GRAVEYARD.* FRIENDLY DECK /) {
      $hero_burned_hash{$1} += 1;
    }
    if (/^\[Zone.*\[name=(.*) id=.*zone=GRAVEYARD.* FRIENDLY HAND /) {
      $hero_discard_hash{$1} += 1;
    }
    if (/^\[Zone.*\[name=(.*) id=.*zone=GRAVEYARD.* OPPOSING (DECK|HAND) /) {
      $op_discard_hash{$1} += 1;
    }
    if (/^\[Zone.*\[name=(.*) id=.*zone=(HAND|PLAY).* OPPOSING HAND /) {
      $op_played_hash{$1} += 1;
    }
    # Requires 'Bob' logging enabled. Blow away old/previous game data if we found the end of a game
    if (/^\[Bob.*legend rank /) {
      %op_played_hash = ();
      %op_discard_hash = ();
      %hero_discard_hash = ();
      %hero_burned_hash = ();
      %hero_mull_hash = ();
      %hero_drawn_hash = ();
      %hero_played_hash = ();
      %game_hash = %deck_hash;
    }
  }
  
  close LOGFILE;

  print Dumper(\%hero_drawn_hash) if ($DEBUG);
  print Dumper(\%hero_mull_hash) if ($DEBUG);
  print Dumper(\%hero_played_hash) if ($DEBUG);
  print Dumper(\%hero_discard_hash) if ($DEBUG);
  print Dumper(\%hero_burned_hash) if ($DEBUG);
  print Dumper(\%op_played_hash) if ($DEBUG);
  print Dumper(\%op_discard_hash) if ($DEBUG);
  print Dumper(\%game_hash) if ($DEBUG);
  
  # Take cards that have been drawn out of the deck
  foreach $card (keys %hero_drawn_hash) {
    $game_hash{$card} -= $hero_drawn_hash{$card};
  }
  
  # Put back any mulligans
  foreach $card (keys %hero_mull_hash) {
    $game_hash{$card} += $hero_mull_hash{$card};
  }
  
  # Throw away the burned/milled cards
  foreach $card (keys %hero_burned_hash) {
    $game_hash{$card} -= $hero_burned_hash{$card};
  }

  # Dump milled/burned cards into the 'Played' hashes if '-m' selected, otherwise combine.
  if ( $opts{m} ) {
    foreach $card (keys %hero_burned_hash) {
      $hero_discard_hash{$card} += $hero_burned_hash{$card};
    }
  } else {
    foreach $card (keys %hero_burned_hash) {
      $hero_played_hash{$card} += $hero_burned_hash{$card};
    }
    foreach $card (keys %hero_discard_hash) {
      $hero_played_hash{$card} += $hero_discard_hash{$card};
    }
    foreach $card (keys %op_discard_hash) {
      $op_played_hash{$card} += $op_discard_hash{$card};
    }
  }

  # Print the current remaining cards in the deck
  printf("Cards in Deck:\n\n");
  foreach $card (keys %game_hash) {
    printf("%-24s %d\n", $card, $game_hash{$card}) if $game_hash{$card} > 0;
  }
  
  # Print the cards that you've played
  printf("\n\n\nCards Played:\n\n");
  foreach $card (keys %hero_played_hash) {
    printf("%-24s %d\n", $card, $hero_played_hash{$card}) if $hero_played_hash{$card} > 0;
  }
  if ( $opts{m} ) {
    # Highlight milled/discarded cards separately
    foreach $card (keys %hero_discard_hash) {
      printf("%-24s %d*\n", $card, $hero_discard_hash{$card}) if $hero_discard_hash{$card} > 0;
    }
  }
  
  # Print the opponent's revealed cards if '-o' selected
  if ( $opts{o} ) {
    printf("\n\n\nOpponent Cards Revealed:\n\n");
    foreach $card (keys %op_played_hash) {
      printf("%-24s %d\n", $card, $op_played_hash{$card}) if $op_played_hash{$card} > 0;
    }
    if ( $opts{m} ) {
      # Highlight milled/discarded cards separately
      foreach $card (keys %op_discard_hash) {
        printf("%-24s %d*\n", $card, $op_discard_hash{$card}) if $op_discard_hash{$card} > 0;
      }
    }
  }

  if ( $opts{m} ) {
    # Legend
    printf("\n\n*Burned or Discarded");
  }

  sleep 2;
}
